// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using AIMonitor;
//
//    var aiResponse = AiResponse.FromJson(jsonString);

using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System;
using System.Globalization;

namespace AIMonitor
{
    public partial class AiResponse
    {
        [JsonProperty("value")]
        public Value Value { get; set; }
    }

    public partial class Value
    {
        [JsonProperty("start")]
        public DateTimeOffset Start { get; set; }

        [JsonProperty("end")]
        public DateTimeOffset End { get; set; }

        [JsonProperty("exceptions/count")]
        public ExceptionsCount ExceptionsCount { get; set; }
    }

    public partial class ExceptionsCount
    {
        [JsonProperty("sum")]
        public long? Sum { get; set; }
    }

    public partial class AiResponse
    {
        public static AiResponse FromJson(string json) => JsonConvert.DeserializeObject<AiResponse>(json, AIMonitor.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this AiResponse self) => JsonConvert.SerializeObject(self, AIMonitor.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}